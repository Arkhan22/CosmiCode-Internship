# -*- coding: utf-8 -*-
"""week 4

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jkIgcdgn_zyRopfqStSeDbqwpvGUHZSs
"""

import pandas as pd
from sklearn.datasets import load_iris
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV
from sklearn.metrics import confusion_matrix, roc_curve, auc, ConfusionMatrixDisplay
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import label_binarize
import matplotlib.pyplot as plt

# Data
iris = load_iris(as_frame=True)
X = iris.data
y = iris.target
X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42)

# Decision Tree
dt = DecisionTreeClassifier()
dt.fit(X_train, y_train)
y_pred = dt.predict(X_test)

# Cross-Validation
scores = cross_val_score(dt, X, y, cv=5)
print("CV Scores:", scores)

# Confusion Matrix
cm = confusion_matrix(y_test, y_pred)
ConfusionMatrixDisplay(cm).plot()
plt.title("Confusion Matrix")
plt.show()

# GridSearchCV
params = {'max_depth': [2, 4, 6], 'criterion': ['gini', 'entropy']}
grid = GridSearchCV(DecisionTreeClassifier(), params, cv=3)
grid.fit(X_train, y_train)
print("Best Params:", grid.best_params_)

# ROC AUC (for binary class)
y_bin = label_binarize(y, classes=[0, 1, 2])[:, 0]  # Class 0 vs rest
rf = RandomForestClassifier()
rf.fit(X_train, y_bin[:len(X_train)])
y_prob = rf.predict_proba(X_test)[:, 1]

fpr, tpr, _ = roc_curve(y_bin[len(X_train):], y_prob)
plt.plot(fpr, tpr, label='ROC curve')
plt.plot([0, 1], [0, 1], 'k--')
plt.xlabel("FPR")
plt.ylabel("TPR")
plt.title("ROC Curve")
plt.legend()
plt.show()